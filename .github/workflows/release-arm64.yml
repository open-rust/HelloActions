name: Release-arm64

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: build ${{ matrix.file }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest # target: aarch64-unknown-linux-musl
        file:
          - ${{ github.event.repository.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      # 不同构建目标对应的 release 目录
      TARGET: ${{ matrix.os == 'macos-latest' && 'target/aarch64-unknown-linux-musl/release' || 'target/release' }}
      # 构建文件名, Windows 平台有 .exe 后缀
      NAME: ${{ format('{0}{1}', matrix.file, startsWith(matrix.os, 'windows') && '.exe' || '') }}
      # 上传制品文件名
      ARTIFACT_NAME: Binary-${{ matrix.file }}-${{ matrix.os }}-arm64
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive # 递归检出git子模块(submodules)

      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.rustup
            ./target
          key: ${{ runner.os }}-${{ matrix.file }}-arm64-cache

      # https://github.com/FiloSottile/homebrew-musl-cross
      - name: musl-tools
        if: matrix.os == 'macos-latest'
        run: |
          brew install filosottile/musl-cross/musl-cross
          ln -s "$(brew --prefix musl-cross)/bin/aarch64-linux-musl-gcc" /usr/local/bin/musl-gcc
          which x86_64-linux-musl-gcc
          which aarch64-linux-musl-gcc
          which musl-gcc

      - name: Rustup
        if: steps.cache.outputs.cache-hit != 'true' && matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-unknown-linux-musl

      - name: Build
        env:
          CARGO_TERM_COLOR: always
        run: |
          cargo build --release --verbose \
            ${{ matrix.os == 'macos-latest' && '--target aarch64-unknown-linux-musl' || '--' }}

      - name: Naming ${{ env.NAMING }}
        id: naming
        env:
          NAMING: >-
            ${{
              format('{0}-{1}-{2}-{3}{4}',
                matrix.file, github.ref_name, 'linux', runner.arch,
                startsWith(matrix.os, 'windows') && '.exe' || ''
              )
            }}
        run: |
          export NAMING="$( echo ${{ env.NAMING }} | tr [:upper:] [:lower:] )"
          echo "FILEPATH=$TARGET/$NAMING" >> $GITHUB_OUTPUT

      - name: Rename file
        run: |
          mv "$TARGET/$NAME" ${{ steps.naming.outputs.FILEPATH }}

      - name: Upload
        uses: actions/upload-artifact@master
        id: artifact-upload-step
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ steps.naming.outputs.FILEPATH }}

      - name: GH Release on ${{ matrix.os }}
        uses: softprops/action-gh-release@v2.0.2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ steps.naming.outputs.FILEPATH }}

      - name: Done
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "### [${{ github.ref_name }}](https://github.com/$GITHUB_REPOSITORY/releases/tag/${{ github.ref_name }}) Released! :rocket:" \
            >> $GITHUB_STEP_SUMMARY

permissions:
  contents: write